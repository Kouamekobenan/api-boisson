
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Product {
  id               String              @id @default(uuid())
  name             String
  description      String?
  price            Decimal
  criticalStockThreshold Int @default(10) // üö® Seuil critique par d√©faut
  purchasePrice    Decimal  @default(0)           // ‚úÖ Ajout ici
  stock            Int
  supplierId       String
  supplier         Supplier             @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  stockMovements   StockMovement[]
  deliveryProducts DeliveryProduct[]
  orderItems       OrderItem[]
  categoryProductId String?
  categoryProduct   CategoryProduct? @relation(fields: [categoryProductId], references: [id], onDelete: SetNull)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model CategoryProduct {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[] // Relation avec les produits
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model DeliveryProduct {
  id          String   @id @default(uuid())
  deliveryId  String
  delivery    Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Decimal      // Quantit√© du produit livr√©
  deliveredQuantity Decimal     @default(0) // Quantit√© effectivement livr√©e, valeur par d√©faut = 0
  returnedQuantity Decimal     @default(0) // Quantit√© retourn√©e, valeur par d√©faut = 0
  createdAt   DateTime @default(now())
  @@unique([deliveryId, productId]) // Une m√™me livraison ne peut avoir un produit qu'une seule fois
}

model Supplier {
  id        String   @id @default(uuid())
  name      String
  email     String?
  phone     String?
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StockMovement {
  id         String      @id @default(uuid())
  productId  String
  product    Product     @relation(fields: [productId], references: [id])
  type       StockType
  quantity   Decimal
  createdAt  DateTime    @default(now())
  deliveryId String?     // Lien vers une livraison sp√©cifique
  delivery   Delivery?   @relation("StockMovementDelivery", fields: [deliveryId], references: [id]) // Nom de relation explicite
}



enum StockType {
  ENTRY
  EXIT
  RETURN
}


model DeliveryPerson {
  id        String   @id @default(uuid())
  name      String
  phone     String?
  deliveries Delivery[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Delivery {
  id               String              @id @default(uuid())
  deliveryPersonId String?
  deliveryPerson   DeliveryPerson?     @relation(fields: [deliveryPersonId], references: [id])
  status           DeliveryStatus
  createdAt        DateTime            @default(now())
  deliveryProducts DeliveryProduct[]
  stockMovements   StockMovement[]     @relation("StockMovementDelivery")
}

enum DeliveryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

model Invoice {
  id        String   @id @default(uuid())
  orderId   String?   @unique
  order     Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade, map: "OrderToInvoice")
  totalPrice Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String?    // ‚úÖ Nouveau champ
  phone     String?   // ‚úÖ Nouveau champ (optionnel)
  role      UserRole
  orders    Order[]   // Relation inverse
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  MANAGER
  DELIVERY_PERSON
}

model Order {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status     OrderStatus
  totalPrice Decimal
  orderItems OrderItem[]
  invoice    Invoice?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Decimal
  unitPrice Decimal
  totalPrice Decimal
}
