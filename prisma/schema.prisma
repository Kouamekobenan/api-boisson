generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products          Product[]
  categoryProducts  CategoryProduct[]
  deliveryProducts  DeliveryProduct[]
  suppliers         Supplier[]
  stockMovements    StockMovement[]
  deliveryPersons   DeliveryPerson[]
  deliveries        Delivery[]
  invoices          Invoice[]
  users             User[]
  orders            Order[]
  orderItems        OrderItem[]
  customers         Customer[]
  directSales       DirectSale[]
  directSaleItems   DirectSaleItem[]
  creditPayments    CreditPayment[]
}

model Product {
  id                     String            @id @default(uuid())
  name                   String
  description            String?
  price                  Decimal
  criticalStockThreshold Int               @default(10)
  purchasePrice          Decimal           @default(0)
  stock                  Int
  supplierId             String
  supplier               Supplier          @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  stockMovements         StockMovement[]
  deliveryProducts       DeliveryProduct[]
  orderItems             OrderItem[]
  directSaleItems        DirectSaleItem[]
  categoryProductId      String?
  categoryProduct        CategoryProduct?  @relation(fields: [categoryProductId], references: [id], onDelete: SetNull)
  tenantId               String?
  tenant                 Tenant?            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
}

model CategoryProduct {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  tenantId  String?
  tenant    Tenant?    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model DeliveryProduct {
  id                String   @id @default(uuid())
  deliveryId        String
  delivery          Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  productId         String
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity          Decimal
  deliveredQuantity Decimal  @default(0)
  returnedQuantity  Decimal  @default(0)
  tenantId        String?
  tenant          Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())

  @@unique([deliveryId, productId])
}

model Supplier {
  id        String    @id @default(uuid())
  name      String
  email     String?
  phone     String?
  products  Product[]
  tenantId  String?
  tenant    Tenant?    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model StockMovement {
  id           String      @id @default(uuid())
  productId    String
  product      Product     @relation(fields: [productId], references: [id])
  type         StockType
  quantity     Decimal
  createdAt    DateTime    @default(now())
  deliveryId   String?
  delivery     Delivery?   @relation("StockMovementDelivery", fields: [deliveryId], references: [id])
  directSaleId String?
  directSale   DirectSale? @relation(fields: [directSaleId], references: [id])
  tenantId     String?
  tenant       Tenant?      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

enum StockType {
  ENTRY
  EXIT
  RETURN
}

model DeliveryPerson {
  id         String     @id @default(uuid())
  name       String
  phone      String?
  deliveries Delivery[]
  tenantId   String?
  tenant     Tenant?     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Delivery {
  id               String            @id @default(uuid())
  deliveryPersonId String?
  deliveryPerson   DeliveryPerson?   @relation(fields: [deliveryPersonId], references: [id])
  status           DeliveryStatus
  createdAt        DateTime          @default(now())
  deliveryProducts DeliveryProduct[]
  stockMovements   StockMovement[]   @relation("StockMovementDelivery")
  tenantId         String?
  tenant           Tenant?            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

enum DeliveryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

model Invoice {
  id         String   @id @default(uuid())
  orderId    String?  @unique
  order      Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade, map: "OrderToInvoice")
  totalPrice Decimal
  tenantId   String?
  tenant     Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  password      String
  name          String?
  phone         String?
  role          UserRole
  orders        Order[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  lastActiveAt  DateTime?
  salesAsSeller DirectSale[] @relation("Seller")
  tenantId      String?
  tenant        Tenant?       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  MANAGER
  DELIVERY_PERSON
  CUSTOMER
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  status     OrderStatus
  totalPrice Decimal
  orderItems OrderItem[]
  invoice    Invoice?
  tenantId   String?
  tenant     Tenant?      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

model OrderItem {
  id         String  @id @default(uuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity   Decimal
  unitPrice  Decimal
  totalPrice Decimal
  tenantId   String?
  tenant     Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Customer {
  id        String       @id @default(uuid())
  name      String
  phone     String?      @unique
  email     String?      @unique
  address   String?
  sales     DirectSale[]
  tenantId  String?
  tenant    Tenant?       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model DirectSale {
  id         String    @id @default(uuid())
  sellerId   String?
  seller     User?     @relation("Seller", fields: [sellerId], references: [id], onDelete: SetNull)
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  totalPrice Decimal
  isCredit   Boolean @default(false)
  amountPaid Decimal @default(0)
  dueAmount  Decimal @default(0)
  saleItems      DirectSaleItem[]
  payments       CreditPayment[]
  stockMovements StockMovement[]
  tenantId       String?
  tenant         Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DirectSaleItem {
  id           String     @id @default(uuid())
  directSaleId String
  directSale   DirectSale @relation(fields: [directSaleId], references: [id], onDelete: Cascade)
  productId    String
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity     Decimal
  unitPrice    Decimal
  totalPrice   Decimal
  tenantId     String?
  tenant       Tenant?     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model CreditPayment {
  id           String     @id @default(uuid())
  directSaleId String
  directSale   DirectSale @relation(fields: [directSaleId], references: [id], onDelete: Cascade)
  amount       Decimal
  tenantId     String?
  tenant       Tenant?     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  paidAt       DateTime   @default(now())
}
